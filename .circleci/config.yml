# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details

version: 2.1

  # References are blocks of configurations that we can reference and reuse.
  #references:

  # Workspaces represent the spaces we work on & are useful for sharing data between jobs.
  # Create a workspace with the ~/code directory.
  # workspace: &workspace
  #             ~/code

  # Docker Image Configs
  # android_config: &android_config
  #   working_directory: *workspace
  #   docker:
  #     - image: circleci/android:api-29-node
  #   environment:
  #     JVM_OPTS: -Xmx2048m
#     GRADLE_OPTS: -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false

orbs:
  android: circleci/android@2.0.0
  gcp-cli: circleci/gcp-cli@2.2.0

  # Cache - a cache mechanism for our dependencies
  # gradle_key: &gradle_key
  #               jars-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle.kts" }}-{{ checksum "app/build.gradle.kts" }}

  # gems_key: &gems_key
  #             gems-{{ checksum "Gemfile.lock" }}

  # restore_gradle_cache: &restore_gradle_cache
  #   restore_cache:
  #     key: *gradle_key

  # restore_gems_cache: &restore_gems_cache
  #   restore_cache:
  #     key: *gems_key

  # save_gradle_cache: &save_gradle_cache
  #   save_cache:
  #     paths:
  #       - ~/.gradle
  #       - ~/.m2
  #     key: *gradle_key

  # save_gems_cache: &save_gems_cache
  #   save_cache:
  #     paths:
  #       - vendor/bundle
  #     key: *gems_key

  # Dependencies
  ruby_dependencies: &ruby_dependencies
    run:
      name: Download Ruby Dependencies
      command: |
        gem install bundler
        bundle check || bundle update || bundle install --path vendor/bundle

  android_dependencies: &android_dependencies
    run:
      name: Download Android Dependencies
      command: |
        sudo chmod +x gradlew
        ./gradlew androidDependencies

  # Keys
#  decode_android_key: &decode_android_key
#    run:
#      name: Decode Android Keystore
#      command: echo $KEYSTORE_PATH | base64 -d | tee brimore.jks app/brimore.jks >/dev/null

  get_commit_message: &get_commit_message
    run:
      name: Get Commit Message
      command: |
        echo $CIRCLE_BRANCH
        echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")' >> $BASH_ENV
        source $BASH_ENV
        echo $COMMIT_MESSAGE

  # ---------------------------------------------------------------------------------------------------------------------
  # DECODE FIREBASE GOOGLE_SERVICE_JSON FILE AND WRITE IT TO A FILE
  # ---------------------------------------------------------------------------------------------------------------------
#  decode_gservices_key: &decode_gservices_key
#    run:
#      name: Decode Google Services JSON key
#      command: |
#        echo $GOOGLE_SERVICES_JSON | base64 -d | tee app/google-services.json app/src/mock/google-services.json app/src/prod/google-services.json app/src/dev/google-services.json app/src/qa/google-services.json >/dev/null
  # ---------------------------------------------------------------------------------------------------------------------
  # DECODE GOOGLE_PLAY_JSON_KEY AND WRITE IT TO A FILE
  # ---------------------------------------------------------------------------------------------------------------------
#  decode_gplay_key: &decode_gplay_key
#    run:
#      name: Decode Google Play JSON key
#      command: |
#        echo $GOOGLE_PLAY_JSON_KEY | base64 -d | tee google-play-json-key-file.json >/dev/null
  # ---------------------------------------------------------------------------------------------------------------------
  # INSTALL THE FIREBASE CLI FILE & ENABLE THE GLOBALLY AVAILABLE firebase COMMAND
  # ---------------------------------------------------------------------------------------------------------------------
#  firebase_cli_install: &firebase_cli_install
#    run:
#      name: Install the Firebase CLI
#      command: |
#        curl -sL firebase.tools | bash

#  fastlane_add_app_center: &fastlane_add_app_center
#    run:
#      name: Add AppCenter Fastlane Plugin
#      command: fastlane add_plugin appcenter

jobs:

  #  ## Run unit tests
  #  test_unit:
  #    <<: *android_config
  #    steps:
  #      - checkout
  #      - *restore_gradle_cache
  #      - *restore_gems_cache
  #      - *android_dependencies
  #      - *ruby_dependencies
  #      - *save_gradle_cache
  #      - *save_gems_cache
  #      - *decode_gservices_key
  #      - run:
  #          name: Run unit tests
  #          command: |
  #            if [ -z "$CIRCLE_PULL_REQUEST" != "" ]; then
  #              echo "Doing a Pull Request Build for ${CIRCLE_PULL_REQUEST}."
  #              bundle exec fastlane unit_tests build_flavor:"dev" build_type:"debug"
  #            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
  #              echo "Doing a Build on the ${CIRCLE_BRANCH} branch."
  #              bundle exec fastlane unit_tests build_flavor:"qa" build_type:"debug"
  #            elif [[ "${CIRCLE_BRANCH}" =~ ^release-.*$ ]];  then
  #              echo "Doing a Build on the ${CIRCLE_BRANCH} branch."
  #              bundle exec fastlane unit_tests build_flavor:"prod" build_type:"release"
  #            else
  #              echo "Doing a default Build on the ${CIRCLE_BRANCH} branch."
  #              bundle exec fastlane unit_tests build_flavor:"dev" build_type:"debug"
  #            fi
  #      - store_artifacts:
  #          path: app/build/reports/
  #          destination: /reports/
  #      - store_test_results:
  #          path: app/build/test_results/
  #          destination: /test-results/
  #
  #  # Run Instrumentation Tests
  #  test_instrumentation:
  #    <<: *android_config
  #    steps:
  #      - checkout
  #      - *restore_gradle_cache
  #      - *restore_gems_cache
  #      - *android_dependencies
  #      - *ruby_dependencies
  #      - *save_gradle_cache
  #      - *save_gems_cache
  #      - *decode_gservices_key
  #      - run:
  #          name: Run Instrumented Tests - (Espresso Tests)
  #          command: |
  #            if [ -z "$CIRCLE_PULL_REQUEST" != "" ]; then
  #              echo "Run Instrumented Test for the Pull Request Build ${CIRCLE_PULL_REQUEST}."
  #              bundle exec fastlane instrumentation_tests_firebase_testlab build_flavor:"dev"
  #            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
  #              echo "Run Instrumented Test on the ${CIRCLE_BRANCH} branch."
  #              bundle exec fastlane instrumentation_tests_firebase_testlab build_flavor:"qa"
  #            elif [[ "${CIRCLE_BRANCH}" =~ ^release-.*$ ]];  then
  #              echo "Run Instrumented Test on the ${CIRCLE_BRANCH} branch."
  #              bundle exec fastlane instrumentation_tests_firebase_testlab build_flavor:"prod"
  #            else
  #              echo "Run Instrumented Test for a default Build on the ${CIRCLE_BRANCH} branch."
  #              bundle exec fastlane instrumentation_tests_firebase_testlab build_flavor:"dev"
  #            fi
  #      - store_artifacts:
  #          path: app/build/outputs/
  #          destination: /outputs/
  #      - store_test_results:
  #          path: app/build/outputs/
  #          destination: /outputs/
  unit_test:
    executor:
      name: android/android-machine
      tag: "202102-01"
      resource-class: large
    parallelism: 3
    steps:
      - checkout
      - android/restore-gradle-cache
      - android/restore-build-cache
      - *android_dependencies
      - *ruby_dependencies
      - android/save-gradle-cache
      - android/save-build-cache
      - run:
          name: Generate list of modules for this fork
          command: |
            cat .circleci/test_modules.txt | circleci tests split > .circleci/fork_test_modules.txt && \
            echo "Modules for this fork:" && \
            cat .circleci/fork_test_modules.txt
#      - run:
#          name: Run module unit tests
#          no_output_timeout: 300m
#          command: bundle exec fastlane run_unit_tests task_name:$(cat .circleci/fork_test_modules.txt | awk '{for (i=1; i<=NF; i++) printf "%s ",$i}')
      #      - run:
      #          name: Run Unit Tests
      #          no_output_timeout: 30m
      #          command: bundle exec fastlane run_unit_tests build_flavor:"production"
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  staging_deployment:
    executor:
      name: android/android-machine
      tag: "202102-01"
      resource-class: large
    steps:
      - checkout
      - android/restore-gradle-cache
      - android/restore-build-cache
      - *get_commit_message
      - *android_dependencies
      - *ruby_dependencies
      - android/save-gradle-cache
      - android/save-build-cache
      #      - *decode_gservices_key
#      - *decode_android_key
#      - *fastlane_add_app_center
#      - run:
#          name: Generate Testing Apk and Upload to AppCenter
#          command: bundle exec fastlane generate_apk_upload_to_app_center build_flavor:"beta"


#  firebase_app_distribution:
#    <<: *android_config
#    steps:
#      - checkout
#      - *restore_gradle_cache
#      - *restore_gems_cache
#      - *android_dependencies
#      - *ruby_dependencies
#      - *save_gradle_cache
#      - *save_gems_cache
#      - *decode_android_key
#      - *firebase_cli_install
#      - run:
#          name: Deploy latest Beta build to Firebase App Distribution
#          command: bundle exec fastlane distribute group:android-qa
#
#  playstore_deployment:
#    <<: *android_config
#    steps:
#      - checkout
#      - *restore_gradle_cache
#      - *restore_gems_cache
#      - *android_dependencies
#      - *ruby_dependencies
#      - *save_gradle_cache
#      - *save_gems_cache
#      - *decode_gservices_key
#      - *decode_android_key
#      - *decode_gplay_key
#      - run:
#          name: Upload Signed APK to Internal Test Track
#          command: bundle exec fastlane playstore build_flavor:"prod" build_type:"release"

workflows:
  workflow:

    # Jobs that will run when you push to your repo
    jobs:
      #    - unit_test:
      #       filters:
      #        branches:
      #         only:
      #- staging
      #          - master
      #- dev
      #- alpha

      - staging_deployment:
          filters:
            branches:
              only:
                - main
            #requires:
            #- unit_test

#      - production_deployment:
#          filters:
#            branches:
#              only:
#                - master
#          requires:
#            - test_instrumentation
#      - firebase_app_distribution:
#          filters:
#            branches:
#              only:
#                - master
#                - add_circleci
#          requires:
#            - test_instrumentation
#      - playstore_deployment:
#          filters:
#            branches:
#              only:
#                - /^release-[0-9]+\.[0-9]+\.[0-9]+$/
#          requires:
#            - test_instrumentation